options(repos='http://mirrors.tuna.tsinghua.edu.cn/CRAN/')
options(BioC_mirror="http://mirrors.ustc.edu.cn/bioc/")  
############################################################
library(Seurat)
library(monocle3)
library(ggplot2)
library(cowplot)
library(Matrix)
library(dplyr)
library(tidyverse)
library(patchwork)
library(SeuratObject)

DefaultAssay(WWS.integrated_rename) <- "integrated"
DefaultAssay(WWS.integrated_rename) <- "RNA"
New <- JoinLayers(WWS.integrated_rename, overwrite = TRUE)

test <- GetAssayData(New, assay = "RNA", slot = "counts") 
cell_metadata <- New@meta.data
gene_annotation <- data.frame(gene_short_name = rownames(test))
row.names(gene_annotation) <- rownames(test)
cds <- new_cell_data_set(test, cell_metadata = cell_metadata, gene_metadata = gene_annotation)

#normalization
cds <- preprocess_cds(cds, num_dim = 40)
plot_pc_variance_explained(cds)

#Batch effect removal
cds <- align_cds(cds, num_dim = 40)

#dimensionality reduction
cds <- reduce_dimension(cds, preprocess_method = "PCA")  

cds.embed <- cds@int_colData$reducedDims$UMAP
int.embed <- Embeddings(New, reduction = "umap")
int.embed <- int.embed[row.names(cds.embed),]
cds@int_colData$reducedDims$UMAP <- int.embed

#visualization
plot_cells(cds, reduction_method = "UMAP", color_cells_by = "cell_type")

#partition
cds <- cluster_cells(cds)
plot_cells(cds, color_cells_by = "partition")  

#learn graph
cds <- learn_graph(cds, use_partition = FALSE)

#visualization
plot_cells(cds, color_cells_by = "cell_type", label_cell_groups = TRUE, 
                      label_leaves = TRUE, label_branch_points = TRUE )

plot_cells(cds, color_cells_by = "seurat_clusters", label_cell_groups = TRUE, 
                      label_leaves = TRUE, label_branch_points = TRUE )

plot_cells(cds, color_cells_by = "pseudotime", label_cell_groups = TRUE, 
           label_leaves = TRUE, label_branch_points = TRUE )


plot_cells(cds, color_cells_by = "orig.ident", label_cell_groups = FALSE, 
           label_leaves = FALSE, label_branch_points = FALSE )


  
#order cells 
cds <- order_cells(cds)

#pseudotime
pseudotime(cds)
cds$monocle3_pseudotime <- pseudotime(cds)
data.pseudo <- as.data.frame(colData(cds))
pdf(paste0("./","file_name",".pdf"),width = 6,height = 6)
ggplot(data.pseudo, aes(monocle3_pseudotime,reorder(orig.ident,monocle3_pseudotime, median), fill = orig.ident)) + 
  geom_boxplot()
dev.off()


#cell density (all cells)
colour = c("#6699CC","#33CCCC", "#FF6699", "#CC3399","#300CCC", "#FF6677")
ggplot(data.pseudo, aes(monocle3_pseudotime, fill = orig.ident)) +
  geom_density(bw = 0.5, size = 0.3,alpha = 0.7) +
  scale_fill_manual(name = "", values = colour) 


#DEGs
Track_genes <- graph_test(cds, neighbor_graph="principal_graph", cores=1)

write.csv(Track_genes, "Trajectory_genes.csv", row.names = F)


#gene expression level
gene_short_name = rownames(cds)

Track_genes <- c("Ech004797", "Ech005713") #change the gene names based on each figure
Track_gene_sig <- read.csv("Trajectory_genes_mudijiyin.csv")
plot_genes_in_pseudotime(cds[Track_genes,], cell_size = 0.1, color_cells_by = "orig.ident", min_expr=0.5, ncol = 2)


#Gene coexpression module
Track_genes <- read.csv("Trajectory_genes_mudijiyin.csv")
genelist <- pull(Track_genes,gene_short_name) %>% as.character()
gene_module <- find_gene_modules(cds[genelist,], resolution = 1.5, cores = 1)
write.csv(gene_module, "gene_module_2.csv", row.names = T)
cell_group <- tibble::tibble(cell=row.names(colData(cds)), cell_group=colData(cds)$cell_type)
agg_mat <- aggregate_gene_expression(cds, gene_module, cell_group)
row.names(agg_mat) <- stringr::str_c("Module", row.names(agg_mat))
pheatmap::pheatmap(agg_mat, border = F, scale = "column", clustering_method = "ward.D2")


